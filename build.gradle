buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net/' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
    }
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'maven-publish'
apply plugin: 'idea'

defaultTasks 'build'

sourceSets {
    api {
        resources {
            // API has no generated stuff as all content should be in the main mod
        }
    }
    main {
        resources {
            //Add the generated nordicarcanum module resources
            srcDir 'src/generated'
            // copy everything but blender files.
            exclude '**/*.blend'
            //...and the cache file
            exclude '.cache'
        }
    }
}

configurations {
    // API
    // The API (currently) needs to know about Minecraft and this is the cleanest way we can do it
    apiImplementation.extendsFrom(minecraft)

    // MAIN
    // These mostly reduce spam as there is nothing the API needs that won't be needed by the full mod as well
    // Just register things as a API dependency of any of these types and the main mod will see it too
    compileOnly.extendsFrom(apiCompileOnly)
    runtimeOnly.extendsFrom(apiRuntimeOnly)
    implementation.extendsFrom(apiImplementation)
}

version = "${minecraft_version}-${nordicarcanum_version}"
group = 'nordicarcanum' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'NordicArcanum'

// Mojang ships Java 16 to end users in 1.17+ instead of Java 8 in 1.16 or lower, so your mod should target Java 16.
java.toolchain.languageVersion = JavaLanguageVersion.of(16)

minecraft {
    mappings channel: "${mappings_channel}", version: "${minecraft_version}"

    // AccessTransformer is in API so it is usable by any mod that implements the API
    accessTransformer file('src/api/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            property 'forge.logging.console.level', 'debug'

            if (project.hasProperty('mc_uuid')) {
                //Your uuid without any dashes in the middle
                args '--uuid', project.getProperty('mc_uuid')
            }
            if (project.hasProperty('mc_username')) {
                //Your username/display name, this is the name that shows up in chat
                // Note: This is not your email, even if you have a Mojang account
                args '--username', project.getProperty('mc_username')
            }
            if (project.hasProperty('mc_accessToken')) {
                //Your access token, you can find it in your '.minecraft/launcher_accounts.json' file
                args '--accessToken', project.getProperty('mc_accessToken')
            }

            mods {
                nordicarcanum {
                    // main needs to be first for FML to find mods.toml
                    source(sourceSets.main)
                    source(sourceSets.api)
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            property 'forge.logging.console.level', 'debug'

            mods {
                nordicarcanum {
                    source(sourceSets.main)
                    source(sourceSets.api)
                }
            }
        }

        data {
            workingDirectory project.file('run')
            environment 'target', 'fmluserdevdata'
            properties 'fml.earlyprogresswindow': 'false'

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            property 'forge.logging.console.level', 'debug'

            args '--all',
                '--output', file('src/generated/'),
                '--mod', "${nordicarcanum_id}",
                // Files that cannot be generated (i.e. textures and sounds) should be put in s/m/r
                '--existing', 'src/main/resources'

            mods {
                nordicarcanum {
                    source(sourceSets.main)
                    source(sourceSets.api)
                }
            }
        }
    }
}

repositories {

}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    apiCompileOnly "org.jetbrains:annotations:${jb_annotations}"

    //compileOnly fg.deobf("mezz.jei:jei-${minecraft_version}:${jei_version}:api")
    // at runtime, use the full JEI jar
    //runtimeOnly fg.deobf("mezz.jei:jei-${minecraft_version}:${jei_version}")

    // This allows the main mod to use API code
    implementation sourceSets.api.output
}

task apiJar(type: Jar) {
    archiveClassifier.set('api')
    from sourceSets.api.output
    manifest {
        attributes([
            "Specification-Title"  : arcanum_api_id,
            "Specification-Vendor" : "${mod_vender}",
            "Specification-Version": arcanum_api_version,
        ])
    }
}

jar {
    //We don't need to mention main's outputs here because the java plugin includes them by default
    from sourceSets.api.output
    manifest {
        from apiJar.manifest // Copy from apiJar's manifest
        attributes([ //and include these additions
            "Implementation-Title"    : nordicarcanum_id,
            "Implementation-Version"  : nordicarcanum_version,
            "Implementation-Vendor"   : "${mod_vender}",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
apiJar.finalizedBy('reobfJar')
jar.finalizedBy('reobfJar')
tasks.build.dependsOn('jar', 'apiJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

artifacts {
    archives apiJar
    archives jar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact apiJar
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}