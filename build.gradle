import groovy.json.JsonOutput
import groovy.json.JsonSlurper

buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net/' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
    }
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'maven-publish'
apply plugin: 'idea'

defaultTasks 'build'

idea {
    module {
        // For some reason this is necessary for IDEA 2014 workspaces to recognize assets
        inheritOutputDirs = true
        //Exclude directories from being managed
        for (String excludeDirName in ["run", "out", "logs", "gradle"]) {
            File excludeDir = new File(projectDir, excludeDirName)
            excludeDirs.add(excludeDir)
        }
    }
}

sourceSets {
    main {
        resources {
            include '**/**'
            // copy everything else, but blender files.
            exclude '**/*.blend'
            //Add the generated main module resources
            srcDirs += 'src/generated/main'
            //But exclude the cache of the generated data from what gets built
            exclude '.cache'
        }
    }
    nordicarcanum {
        resources {
            include '**/**'
            // copy everything else, but blender files.
            exclude '**/*.blend'
            //Add the generated nordicarcanum module resources
            srcDirs += 'src/generated/nordicarcanum'
            //But exclude the cache of the generated data from what gets built
            exclude '.cache'
        }

        compileClasspath += sourceSets.main.output
    }
}

version = "${minecraft_version}-${arcanum_api_version}"
group = 'nordicarcanum' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'NordicArcanumAll'

// Mojang ships Java 16 to end users in 1.17+ instead of Java 8 in 1.16 or lower, so your mod should target Java 16.
java.toolchain.languageVersion = JavaLanguageVersion.of(16)

minecraft {
    mappings channel: "${mappings_channel}", version: "${minecraft_version}"

    accessTransformers(file('src/main/resources/META-INF/accesstransformer.cfg'),
            file('src/nordicarcanum/resources/META-INF/accesstransformer.cfg'))

    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            property 'forge.logging.console.level', 'debug'

            if (project.hasProperty('mc_uuid')) {
                //Your uuid without any dashes in the middle
                args '--uuid', project.getProperty('mc_uuid')
            }
            if (project.hasProperty('mc_username')) {
                //Your username/display name, this is the name that shows up in chat
                // Note: This is not your email, even if you have a Mojang account
                args '--username', project.getProperty('mc_username')
            }
            if (project.hasProperty('mc_accessToken')) {
                //Your access token, you can find it in your '.minecraft/launcher_accounts.json' file
                args '--accessToken', project.getProperty('mc_accessToken')
            }

            mods {
                arcanumapi {
                    source(sourceSets.main)
                }
                nordicarcanum {
                    source(sourceSets.nordicarcanum)
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            property 'forge.logging.console.level', 'debug'

            mods {
                arcanumapi {
                    source(sourceSets.main)
                }
                nordicarcanum {
                    source(sourceSets.nordicarcanum)
                }
            }
        }

        data {
            workingDirectory project.file('run')
            environment 'target', 'fmluserdevdata'
            properties 'fml.earlyprogresswindow': 'false'

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            property 'forge.logging.console.level', 'debug'

            args '--all', '--output', file('src/generated/'),
                    '--mod', "${arcanum_api_id}",
                    '--existing', sourceSets.main.resources.srcDirs[0],
                    '--mod', "${nordicarcanum_id}",
                    '--existing', sourceSets.nordicarcanum.resources.srcDirs[0]

            mods {
                arcanumapi {
                    source(sourceSets.main)
                }
                nordicarcanum {
                    source(sourceSets.nordicarcanum)
                }
            }
        }
    }
}

repositories {
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    compileOnly "org.jetbrains:annotations:${jb_annotations}"

    //compileOnly fg.deobf("mezz.jei:jei-${minecraft_version}:${jei_version}:api")
    // at runtime, use the full JEI jar
    //runtimeOnly fg.deobf("mezz.jei:jei-${minecraft_version}:${jei_version}")
}

def getManifestAttributes(String title, String mod_version) {
    return [
            "Specification-Title"     : title,
            "Specification-Vendor"    : "${mod_vender}",
            "Specification-Version"   : mod_version,
            "Implementation-Title"    : title,
            "Implementation-Version"  : mod_version,
            "Implementation-Vendor"   : "${mod_vender}",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
    ]
}

task apiJar(type: Jar) {
    duplicatesStrategy(DuplicatesStrategy.FAIL)
    archiveClassifier.set("${nordicarcanum_id}")
    archiveFileName.set("${arcanum_api_id}-${arcanum_api_version}.jar")
    from sourceSets.main.output
    manifest.attributes(getManifestAttributes("${arcanum_api_name}", "${arcanum_api_version}"))
    afterEvaluate { finalizedBy reobfApiJar }
}

task nordicarcanumJar(type: Jar) {
    duplicatesStrategy(DuplicatesStrategy.FAIL)
    archiveClassifier.set("${nordicarcanum_id}")
    archiveFileName.set("${nordicarcanum_id}-${nordicarcanum_version}.jar")
    from sourceSets.nordicarcanum.output
    manifest.attributes(getManifestAttributes("${nordicarcanum_name}", "${nordicarcanum_version}"))
    afterEvaluate { finalizedBy reobfNordicarcanumJar }
}

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar') 
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

artifacts {
    archives apiJar
    archives jar
    archives nordicarcanumJar
}

reobf {
    apiJar { classpath.from(sourceSets.main.compileClasspath) }
    jar { classpath.from(sourceSets.main.compileClasspath) }
    nordicarcanumJar { classpath.from(sourceSets.nordicarcanum.compileClasspath) }
}

configurations {
    //Make sure all our sub source set stuff extends the proper base methods so that
    // they can see all the dependencies we have in dependencies including forge
    def compileExtenders = [arcanumapiCompile, nordicarcanumCompile]
    def compileOnlyExtenders = [arcanumapiCompileOnly, nordicarcanumCompileOnly]
    def runtimeOnlyExtenders = [arcanumapiRuntimeOnly, nordicarcanumRuntimeOnly]
    for (def compileExtender : compileExtenders) {
        compileExtender.extendsFrom(compile)
        compileExtender.extendsFrom(minecraft)
    }
    for (def compileOnlyExtender : compileOnlyExtenders) {
        compileOnlyExtender.extendsFrom(compileOnly)
        compileOnlyExtender.extendsFrom(minecraft)
    }
    for (def runtimeOnlyExtender : runtimeOnlyExtenders) {
        runtimeOnlyExtender.extendsFrom(runtimeOnly)
        runtimeOnlyExtender.extendsFrom(minecraft)
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}